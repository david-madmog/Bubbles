/*
 * BubblesView.java
 */
package bubbles;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.prefs.Preferences;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.Timer;

/**
 * The application's main frame.
 */
public class BubblesView extends FrameView {
    public int xs, ys ;
    BubblesGrid Cells ;
    BubblesGrid UndoCells ;
    int UndoScore = 0 ;
    int Score = 0 ;
    HighScore HS ;
    BubblesGrid.FallStyle FS ;

    public BubblesView(SingleFrameApplication app) {
        super(app);

        initComponents();
        HS = new HighScore() ;
        Preferences prefs = Preferences.userNodeForPackage(BubblesView.class);
        int x = prefs.getInt("Size", 8) ;
        Resize(x) ;
        BubblesGrid.FallStyle vFS = BubblesGrid.FallStyle.values()[prefs.getInt("Style", BubblesGrid.FallStyle.Normal.ordinal())] ;
        Restyle(vFS);
    }

    final void CreateAndLinkCells() {
        Cells = new BubblesGrid(xs, ys) ;
        UndoCells = new BubblesGrid(xs, ys) ;
        
        BubblesPanel BP = (BubblesPanel) mainPanel ;
        BP.Cells = Cells ;
        BP.HS = HS ;
        BP.FS = FS ;
        newGameMenuItemActionPerformed(null) ;
    }


    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = BubblesApp.getApplication().getMainFrame();
            aboutBox = new BubblesAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        BubblesApp.getApplication().show(aboutBox);
    }



    /** This method is called from within the constructor to
     * initialise the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new BubblesPanel();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        newGameMenuItem = new javax.swing.JMenuItem();
        highScoresMenuItem = new javax.swing.JMenuItem();
        undoMenuItem = new javax.swing.JMenuItem();
        OptionsMenu = new javax.swing.JMenu();
        sizeMenu = new javax.swing.JMenu();
        smallSizeMenuItem = new javax.swing.JRadioButtonMenuItem();
        mediumSizeMenuItem = new javax.swing.JRadioButtonMenuItem();
        largeSizeMenuItem = new javax.swing.JRadioButtonMenuItem();
        StyleMenu = new javax.swing.JMenu();
        SimpleStyleMenuItem = new javax.swing.JRadioButtonMenuItem();
        FallLeftStyleMenuItem = new javax.swing.JRadioButtonMenuItem();
        RefilStyleMenuItem = new javax.swing.JRadioButtonMenuItem();
        NeverendingStyleMenuItem = new javax.swing.JRadioButtonMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        statusMessageLabel = new javax.swing.JLabel();

        mainPanel.setName("mainPanel"); // NOI18N
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });
        mainPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mainPanelMouseMoved(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 260, Short.MAX_VALUE)
        );

        menuBar.setName("menuBar"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(bubbles.BubblesApp.class).getContext().getResourceMap(BubblesView.class);
        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(bubbles.BubblesApp.class).getContext().getActionMap(BubblesView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        newGameMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newGameMenuItem.setText(resourceMap.getString("newGameMenuItem.text")); // NOI18N
        newGameMenuItem.setName("newGameMenuItem"); // NOI18N
        newGameMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newGameMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(newGameMenuItem);

        highScoresMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        highScoresMenuItem.setText(resourceMap.getString("highScoresMenuItem.text")); // NOI18N
        highScoresMenuItem.setName("highScoresMenuItem"); // NOI18N
        highScoresMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                highScoresMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(highScoresMenuItem);

        undoMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoMenuItem.setText(resourceMap.getString("undoMenuItem.text")); // NOI18N
        undoMenuItem.setName("undoMenuItem"); // NOI18N
        undoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(undoMenuItem);

        menuBar.add(fileMenu);

        OptionsMenu.setText(resourceMap.getString("OptionsMenu.text")); // NOI18N
        OptionsMenu.setName("OptionsMenu"); // NOI18N

        sizeMenu.setText(resourceMap.getString("sizeMenu.text")); // NOI18N
        sizeMenu.setName("sizeMenu"); // NOI18N

        smallSizeMenuItem.setText(resourceMap.getString("smallSizeMenuItem.text")); // NOI18N
        smallSizeMenuItem.setName("smallSizeMenuItem"); // NOI18N
        smallSizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                smallSizeMenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(smallSizeMenuItem);

        mediumSizeMenuItem.setText(resourceMap.getString("mediumSizeMenuItem.text")); // NOI18N
        mediumSizeMenuItem.setName("mediumSizeMenuItem"); // NOI18N
        mediumSizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mediumSizeMenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(mediumSizeMenuItem);

        largeSizeMenuItem.setText(resourceMap.getString("largeSizeMenuItem.text")); // NOI18N
        largeSizeMenuItem.setName("largeSizeMenuItem"); // NOI18N
        largeSizeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                largeSizeMenuItemActionPerformed(evt);
            }
        });
        sizeMenu.add(largeSizeMenuItem);

        OptionsMenu.add(sizeMenu);

        StyleMenu.setText(resourceMap.getString("StyleMenu.text")); // NOI18N
        StyleMenu.setName("StyleMenu"); // NOI18N

        SimpleStyleMenuItem.setSelected(true);
        SimpleStyleMenuItem.setText(resourceMap.getString("SimpleStyleMenuItem.text")); // NOI18N
        SimpleStyleMenuItem.setName("SimpleStyleMenuItem"); // NOI18N
        SimpleStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SimpleStyleMenuItemActionPerformed(evt);
            }
        });
        StyleMenu.add(SimpleStyleMenuItem);

        FallLeftStyleMenuItem.setText(resourceMap.getString("FallLeftStyleMenuItem.text")); // NOI18N
        FallLeftStyleMenuItem.setName("FallLeftStyleMenuItem"); // NOI18N
        FallLeftStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FallLeftStyleMenuItemActionPerformed(evt);
            }
        });
        StyleMenu.add(FallLeftStyleMenuItem);

        RefilStyleMenuItem.setText(resourceMap.getString("RefilStyleMenuItem.text")); // NOI18N
        RefilStyleMenuItem.setName("RefilStyleMenuItem"); // NOI18N
        RefilStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefilStyleMenuItemActionPerformed(evt);
            }
        });
        StyleMenu.add(RefilStyleMenuItem);

        NeverendingStyleMenuItem.setText(resourceMap.getString("NeverendingStyleMenuItem.text")); // NOI18N
        NeverendingStyleMenuItem.setName("NeverendingStyleMenuItem"); // NOI18N
        NeverendingStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NeverendingStyleMenuItemActionPerformed(evt);
            }
        });
        StyleMenu.add(NeverendingStyleMenuItem);

        OptionsMenu.add(StyleMenu);

        menuBar.add(OptionsMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusMessageLabel.setText(resourceMap.getString("statusMessageLabel.text")); // NOI18N
        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addComponent(statusMessageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(296, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusMessageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 19, Short.MAX_VALUE)
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void newGameMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newGameMenuItemActionPerformed
        Cells.Randomise() ;
        UndoCells.CopyFrom(Cells) ;
        Score = 0 ;
        UndoScore = 0 ;
        statusMessageLabel.setText("Score: " + Integer.toString(Score)) ;
        BubblesPanel BP = (BubblesPanel) mainPanel ;
        BP.HSMode = false ;
        mainPanel.repaint();
    }//GEN-LAST:event_newGameMenuItemActionPerformed

    private void mainPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseMoved
        processMouseMoveEvent(evt) ;
    }//GEN-LAST:event_mainPanelMouseMoved

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked
        BubblesPanel BP = (BubblesPanel) mainPanel ;
        
        if (BP.HSMode) {
            BP.HSMode = false ;
            BP.repaint() ;
        } else
            processMouseClickedEvent(evt) ;
    }//GEN-LAST:event_mainPanelMouseClicked

    private void highScoresMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_highScoresMenuItemActionPerformed
        BubblesPanel BP = (BubblesPanel) mainPanel ;
        BP.HSMode = true ;
        BP.repaint() ;
    }//GEN-LAST:event_highScoresMenuItemActionPerformed

    private void undoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoMenuItemActionPerformed
        Cells.CopyFrom(UndoCells) ;
        Score = UndoScore ;
        statusMessageLabel.setText("Score: " + Integer.toString(Score)) ;
        mainPanel.repaint() ;
    }//GEN-LAST:event_undoMenuItemActionPerformed

    private void smallSizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_smallSizeMenuItemActionPerformed
        Resize(8) ;
    }//GEN-LAST:event_smallSizeMenuItemActionPerformed

    private void mediumSizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mediumSizeMenuItemActionPerformed
        Resize(16) ;
    }//GEN-LAST:event_mediumSizeMenuItemActionPerformed

    private void largeSizeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_largeSizeMenuItemActionPerformed
        Resize(24) ;
    }//GEN-LAST:event_largeSizeMenuItemActionPerformed

    private void SimpleStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SimpleStyleMenuItemActionPerformed
        Restyle(BubblesGrid.FallStyle.Normal) ;
    }//GEN-LAST:event_SimpleStyleMenuItemActionPerformed

    private void NeverendingStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NeverendingStyleMenuItemActionPerformed
        Restyle(BubblesGrid.FallStyle.Neverending) ;
    }//GEN-LAST:event_NeverendingStyleMenuItemActionPerformed

    private void FallLeftStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FallLeftStyleMenuItemActionPerformed
        Restyle(BubblesGrid.FallStyle.FallLeft) ;
    }//GEN-LAST:event_FallLeftStyleMenuItemActionPerformed

    private void RefilStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefilStyleMenuItemActionPerformed
        Restyle(BubblesGrid.FallStyle.Refil) ;
    }//GEN-LAST:event_RefilStyleMenuItemActionPerformed

    private void Resize(int x) {
        xs = x ; ys = x ;

        switch (x) {
            case 8:
                smallSizeMenuItem.setSelected(true);
                mediumSizeMenuItem.setSelected(false);
                largeSizeMenuItem.setSelected(false);
                break ;
            case 16:
                smallSizeMenuItem.setSelected(false);
                mediumSizeMenuItem.setSelected(true);
                largeSizeMenuItem.setSelected(false);
                break ;
            case 24:
                smallSizeMenuItem.setSelected(false);
                mediumSizeMenuItem.setSelected(false);
                largeSizeMenuItem.setSelected(true);
                break ;
        }

        Preferences prefs = Preferences.userNodeForPackage(BubblesView.class);
        prefs.putInt("Size", x) ;
        CreateAndLinkCells() ;
    }

    private void Restyle(BubblesGrid.FallStyle vFS) {
        FS = vFS ;

        switch (vFS) {
            case Normal:
                SimpleStyleMenuItem.setSelected(true);
                NeverendingStyleMenuItem.setSelected(false);
                FallLeftStyleMenuItem.setSelected(false);
                RefilStyleMenuItem.setSelected(false);
                break ;
            case Neverending:
                SimpleStyleMenuItem.setSelected(false);
                NeverendingStyleMenuItem.setSelected(true);
                FallLeftStyleMenuItem.setSelected(false);
                RefilStyleMenuItem.setSelected(false);
                break ;
            case FallLeft:
                SimpleStyleMenuItem.setSelected(false);
                NeverendingStyleMenuItem.setSelected(false);
                FallLeftStyleMenuItem.setSelected(true);
                RefilStyleMenuItem.setSelected(false);
                break ;
            case Refil:
                SimpleStyleMenuItem.setSelected(false);
                NeverendingStyleMenuItem.setSelected(false);
                FallLeftStyleMenuItem.setSelected(false);
                RefilStyleMenuItem.setSelected(true);
                break ;
        }

        Preferences prefs = Preferences.userNodeForPackage(BubblesView.class);
        prefs.putInt("Style", vFS.ordinal()) ;
        CreateAndLinkCells() ;
    }

    private void processMouseMoveEvent(MouseEvent evt) {
        int NCX, NCY ;
        BubblesPanel BP = (BubblesPanel) mainPanel ;

        NCX = (evt.getX() / BP.DrawCellSize )  ;
        NCY = (evt.getY() / BP.DrawCellSize ) ;

        if ((NCX != BP.CX) || (NCY != BP.CY))
        {
            BP.CX = NCX ;
            BP.CY = NCY ;
            NewPop(evt) ;
        } // Cell has changed
    }


   private void processMouseClickedEvent(MouseEvent evt) {
        int NCX, NCY ;
        BubblesPanel BP = (BubblesPanel) mainPanel ;

        if (evt.getButton() == MouseEvent.BUTTON1) {
            NCX = (evt.getX() / BP.DrawCellSize )  ;
            NCY = (evt.getY() / BP.DrawCellSize ) ;

            UndoCells.CopyFrom(Cells) ;
            UndoScore = Score ;
            int ds = Cells.ActionScore(NCX, NCY) ;
            Score += ds ;
            statusMessageLabel.setText("Score: " + Integer.toString(Score)) ;

            if (ds > 0) {
                Cells.ActionFall(FS);

                if (Cells.isAnotherMove()) {
                    BP.CX = NCX ;
                    BP.CY = NCY ;
                    NewPop(evt) ;
                } else {
                    // Done
                    HighScore.HighScoreEntry HSE = HS.new HighScoreEntry() ;
                    HSE.Score = Score ;
                    HSE.xs = xs ;
                    HSE.ys = ys ;
                    HSE.mode = FS.ordinal() ;
                    HSE.When = new Date() ;
                    int HiScorePos = HS.AddEntry(HSE, true) ;
                    BP.HSMode = true ;
                    BP.repaint() ;
                    String sMessage = "There are no more moves" ;
                    if (HiScorePos >= 0)  {
                        sMessage += "\nYou got High score " + Integer.toString(HiScorePos + 1) ;
                    }
                    JOptionPane.showMessageDialog(mainPanel, sMessage, "Game Over", JOptionPane.PLAIN_MESSAGE);
                }
            }
        } // Cell has changed
    }


    private void NewPop(MouseEvent evt) {
        BubblesPanel BP = (BubblesPanel) mainPanel ;
        BubblesPanel.PopScore Pop ;

        if (BP.Pop == null)
            BP.Pop = BP.new PopScore() ;

        Pop = BP.Pop ;
        if (Pop.Timer != null)
            Pop.Timer.stop();

        Pop.Score = Cells.GetScore(BP.CX, BP.CY) ;

        if (Pop.Score > 1) {
            Pop.Point = evt.getPoint() ;
            Pop.Counter = 30 ;

            // Prepare new timer
            if (Pop.Timer == null) {
                ActionListener AL = new ActionListener() {
                    public void actionPerformed(ActionEvent e) {
                        TimerHandler() ;
                    }
                } ;
                // do the work in timer
                Pop.Timer = new Timer(50, AL);
                Pop.Timer.setInitialDelay(50);
            }
            Pop.Timer.start();
        } else {
            Pop.Counter = 0 ;
        }
        BP.repaint();
    }

    private void TimerHandler() {
        BubblesPanel BP = (BubblesPanel) mainPanel ;

        if (BP.Pop != null) {
            BP.Pop.Point.translate(0, -3);
            BP.Pop.Counter-- ;
            BP.repaint();
            if (BP.Pop.Counter == 0)
                BP.Pop.Timer.stop() ;
        }
    }




    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem FallLeftStyleMenuItem;
    private javax.swing.JRadioButtonMenuItem NeverendingStyleMenuItem;
    private javax.swing.JMenu OptionsMenu;
    private javax.swing.JRadioButtonMenuItem RefilStyleMenuItem;
    private javax.swing.JRadioButtonMenuItem SimpleStyleMenuItem;
    private javax.swing.JMenu StyleMenu;
    private javax.swing.JMenuItem highScoresMenuItem;
    private javax.swing.JRadioButtonMenuItem largeSizeMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButtonMenuItem mediumSizeMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem newGameMenuItem;
    private javax.swing.JMenu sizeMenu;
    private javax.swing.JRadioButtonMenuItem smallSizeMenuItem;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenuItem undoMenuItem;
    // End of variables declaration//GEN-END:variables
    private JDialog aboutBox;
}
